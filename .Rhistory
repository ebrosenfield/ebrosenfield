vic.black.margin1 <- margin.table(vic.black, margin=1)
vic.black.margin1
vic.black.total.cap <- vic.black.margin2[1]
total.vic.black <- 168
round(vic.black.total.cap/total.vic.black,2)
vic.white.cap.risk <- round(vic.white.total.cap/total.vic.white,2)
vic.white.cap.risk <- round(vic.black.total.cap/total.vic.black,2)
vic.black.cap.risk <- round(vic.black.total.cap/total.vic.black,2)
vic.white.cap.risk <- round(vic.white.total.cap/total.vic.white,2)
RR.cap.white.vs.black <- vic.white.cap.risk/vic.black.cap.risk
RR.cap.white.vs.black <- round(vic.white.cap.risk/vic.black.cap.risk,2)
RR.cap.white.vs.black
print(vic.white)
vic.white.whiteD.cap <- vic.white[1,1]
vic.white.whiteD.total <- vic.white.margin1[1]
risk.vic.white.whiteD.cap <- round(vic.white.whiteD.cap/vic.white.whiteD.total,2)
risk.vic.white.whiteD.cap
vic.white.blackD.cap <- vic.white[1,2]
vic.white.blackD.cap <- vic.white[2,1]
vic.white.blackD.cap <- vic.white.margin1[2]
vic.white.blackD.cap <- vic.white[2,1]
vic.white.blackD.total <- vic.white.margin1[2]
risk.vick.white.blackD.cap <- round(vic.white.blackD.cap/vic.white.blackD.total,2)
risk.vick.white.blackD.cap
round(risk.vic.white.blackD.cap/risk.vic.white.whiteD.cap,2)
risk.vick.white.blackD.cap <- round(vic.white.blackD.cap/vic.white.blackD.total,2)
round(risk.vic.white.blackD.cap/risk.vic.white.whiteD.cap,2)
risk.vick.white.blackD.cap <- round(vic.white.blackD.cap/vic.white.blackD.total,2)
round(risk.vick.white.blackD.cap/risk.vic.white.whiteD.cap,2)
print(vic.black)
vic.black.whiteD.cap <- vic.black[1,1]
vic.black.whiteD.total <- vic.black.margin1[1]
risk.vic.black.whiteD.cap <- round(vic.black.whiteD.cap/vic.black.whiteD.total,2)
risk.vic.black.whiteD.cap
vic.black.blackD.cap <- vic.black[2,1]
vic.black.blackD.total <- vic.black.margin1[2]
risk.vic.black.blackD.cap <- round(vic.black.blackD.cap/vic.black.blackD.total,2)
risk.vic.black.blackD.cap
round(risk.vic.black.blackD.cap/risk.vic.black.whiteD.cap,2)
(113+119+122+126+124+127+129+131+139+134+138+137+146+149+143+141+141+151+158+169)/20
m <- 136.85
(113-m)^2
113-m
23.85*23.85
(113-m)^2+(119-m)^2+(122-m)^2+(126-m)^2+(124-m)^2+(127-m)^2+(129-m)^2+(131-m)^2+(139-m)^2+(134-m)^2+(130-m)^2+(137-m)^2+(146-m)^2+(149-m)^2+(143-m)^2+(141-m)^2+(141-m)^2+(151-m)^2+(158-m)^2+(169-m)^2
3268.15/19
sqrt(172)
14/20
4^4
(black.cap/total.blackD)/white.cap/total.whiteD
(black.cap/total.blackD)/(white.cap/total.whiteD)
vic.white.cap.risk <- (vic.white.total.cap/total.vic.white)
vic.black.cap.risk <- (vic.black.total.cap/total.vic.black)
RR.cap.white.vs.black <- round(vic.white.cap.risk/vic.black.cap.risk,2)
RR.cap.white.vs.black
risk.vic.white.whiteD.cap <- (vic.white.whiteD.cap/vic.white.whiteD.total)
risk.vick.white.blackD.cap <- (vic.white.blackD.cap/vic.white.blackD.total)
round(risk.vick.white.blackD.cap/risk.vic.white.whiteD.cap,2)
sample(c('heads', 'tails'), size = 1, replace = TRUE
)
sample(c('heads', 'tails'), size = 5, replace = TRUE) #flip a coin
sample(c('heads', 'tails'), size = 5, replace = TRUE, prob = c(0.9, 0.1)) #flip an unfair coin
sample(1:6, size = 1, replace = TRUE)
sample(1:6, size = 3, replace = TRUE)
sample(1:6, size = 12, replace = TRUE, prob = c(1/10, 1/10, 1/10, 1/10, 1/10, 5/10))
set.seed(1)
sample(1:6, size = 3, replace = TRUE)
sample(1:6, size = 3, replace = TRUE)
sample(1:6, size = 3, replace = TRUE)
data <- sample(c('heads', 'tails'), size = 20, replace = TRUE)
barplot(table(data))
set.seed(1)
barplot(table(data))
set.seed(1)
data <- sample(c('heads', 'tails'), size = 20, replace = TRUE)
barplot(table(data))
data2 <- sample(1:6, size = 100, replace = TRUE, prob = c(1/10, 1/10, 1/10, 1/10, 1/10, 5/10))
barplot(table(data2))
rbinom(1, size = 3, p = 0.6)
rbinom(1, size = 1, p = 0.6)
rbinom(1, size = 3, p = 0.6)
3!
factorial(3)
set.seed(1234)
flips <- sample(c('heads', 'tails'), size = 500, replace = TRUE)
plot(cumsum(flips=='heads')/(1:length(flips)), type = 'l', ylimc(0,1), main='Coin Flips', xlab='Number of Flips', ylab='Proportion of Heads')
plot(cumsum(flips=='heads')/(1:length(flips)), type = 'l', ylim(c(0,1)), main='Coin Flips', xlab='Number of Flips', ylab='Proportion of Heads')
plot(cumsum(flips=='heads')/(1:length(flips)), type = 'l', ylim=c(0,1), main='Coin Flips', xlab='Number of Flips', ylab='Proportion of Heads')
set.seed(1727498)
u10 <- runif(n=10, min=-1, max=2)
u20 <- runif(n=20, min=-1, max=2)
u50 <- runif(n=50, min=-1, max=2)
par(mfrow=c(1,3))
hist(u10, xlim=c(-2,3), xlab='x', main='Histogram of 10 Uniform Samples')
hist(u20, xlim=c(-2,3), xlab='x', main='Histogram of 20 Uniform Samples')
hist(u50, xlim=c(-2,3), xlab='x', main='Histogram of 50 Uniform Samples')
c(mean(u10), mean(u20), mean(u50))
set.seed(81793)
u10bar <- replicate(1000, mean(runif(n=10, min=-1, max=2)))
u20bar <- replicate(1000, mean(runif(n=20, min=-1, max=2)))
u50bar <- replicate(1000, mean(runif(n=50, min=-1, max=2)))
hist(u10bar, xlimc(-2,3), breaks=10, xlab='x', main='1000 sample means of size 10')
hist(u10bar, xlimc(-2,3), breaks=10, xlab='x', main='1000 sample means of size 10')
hist(u20bar, xlimc(-2,3), breaks=10, xlab='x', main='1000 sample means of size 20')
hist(u50bar, xlimc(-2,3), breaks=10, xlab='x', main='1000 sample means of size 50')
hist(u10bar, xlim=c(-2,3), breaks=10, xlab='x', main='1000 sample means of size 10')
hist(u20bar, xlim=c(-2,3), breaks=10, xlab='x', main='1000 sample means of size 20')
hist(u50bar, xlim=c(-2,3), breaks=10, xlab='x', main='1000 sample means of size 50')
qqnorm(u10bar, pch=16, main='1000 sample means of size 10')
qqline(u10bar)
qqnorm(u20bar, pch=16, main='1000 sample means of size 20')
qqline(u20bar)
qqnorm(u50bar, pch=16, main='1000 sample means of size 50')
qqline(u50bar)
set.seed(76192)
dat <- rpois(1000, lambda = 14)
qqnorm(dat, pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(dat, col = rgb(1, 0, 0, 0.6))
ar(mfrow=c(1,1))
set.seed(76192)
dat <- rpois(1000, lambda = 14)
qqnorm(dat, pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(dat, col = rgb(1, 0, 0, 0.6))
par(mfrow=c(1,1))
set.seed(76192)
dat <- rpois(1000, lambda = 14)
qqnorm(dat, pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(dat, col = rgb(1, 0, 0, 0.6))
set.seed(199001)
x5bar <- replicate(1000, mean(rpois(5, lambda = 14)))
x20bar <- replicate(1000, mean(rpois(20, lambda = 14)))
x50bar <- replicate(1000, mean(rpois(50, lambda = 14)))
par(mfrow=c(1,2))
hist(x5bar, breaks=20, xlim=c(0.5 * 14, 1.5 * 14), freq = FALSE)
qqnorm(x5bar, ylab="x5bar", pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(x5bar, col = rgb(1, 0, 0, 0.6))
ist(x50bar, breaks=20, xlim=c(0.5 * 14, 1.5 * 14), freq = FALSE)
qqnorm(x50bar, ylab="x50bar", pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(x50bar, col = rgb(1, 0, 0, 0.6))
hist(x50bar, breaks=20, xlim=c(0.5 * 14, 1.5 * 14), freq = FALSE)
qqnorm(x50bar, ylab="x50bar", pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(x50bar, col = rgb(1, 0, 0, 0.6))
hist(x50bar, breaks=20, xlim=c(0.5 * 14, 1.5 * 14), freq = FALSE)
qqnorm(x50bar, ylab="x50bar", pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(x50bar, col = rgb(1, 0, 0, 0.6))
par(mfrow=c(1,2))
hist(x50bar, breaks=20, xlim=c(0.5 * 14, 1.5 * 14), freq = FALSE)
qqnorm(x50bar, ylab="x50bar", pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(x50bar, col = rgb(1, 0, 0, 0.6))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
hist(x20bar, breaks=20, xlim=c(0.5 * 14, 1.5 * 14), freq = FALSE)
qqnorm(x20bar, ylab="x20bar", pch = 16, col = rgb(0, 0, 0, 0.5))
qqline(x20bar, col = rgb(1, 0, 0, 0.6))
mean(x5bar)
mean(x20bar)
mean(x50bar)
barplot(height=dpois(0:1000, lambda = 14), names.arg = 0:1000, main='Poisson PDF',
xlab = 'x', ylab = 'Probability')
barplot(height=dpois(0:30, lambda = 14), names.arg = 0:30, main='Poisson PDF',
xlab = 'x', ylab = 'Probability')
par(mfrow=c(1,1))
barplot(height=dpois(0:30, lambda = 14), names.arg = 0:30, main='Poisson PDF',
xlab = 'x', ylab = 'Probability')
dpois(10, lambda = 14)
ppois(11, lambda = 14)
243+192+14+28
243/277
243/477
192/477
14/477
28/477
(1*.403)+(2*.029)+(4*.059)
.509*(0-.697)^2+.403*(1-.697)^2+.029*(2-.697)^2+.059*(4-.697)
sqrt(0.5283893)
(1*.2115)+(2*.2740)+(3*.2242)+(4*.1299)+(5*.0567)+(6*.0193)+(7*.0053)+(8*.0012)+(9*.0002)
.0776*(0-2.4)^2+.2115*(1-2.4)^2+.2740*(2-2.4)^2+.2242*(3-2.4)^2+.1299*(4-2.4)^2+.0567*(5-2.4)^2+.0193*(6-2.4)^2+.0053*(7-2.4)^2+.0012(8-2.4)^2
.0776*(0-2.4)^2+.2115*(1-2.4)^2+.2740*(2-2.4)^2+.2242*(3-2.4)^2+.1299*(4-2.4)^2+.0567*(5-2.4)^2+.0193*(6-2.4)^2+.0053*(7-2.4)^2+.0012*(8-2.4)^2
sqrt(2.101812)
(48600-43256)/3150
(42000-43256)/3150
.9954-.3446
.9554-.3446
(36000-43256)/3150
.3446-.0107
(.8416*3150)+43256
(29-36)/4.5
(46-36)/4.7
sqrt(138*(1-.69))
(130-138)/6.5
1.2*.11
1.2*.11+.23
(.362)^2
1.2*.085
factorial(6)
factorial(6)/factorial(2)
factorial(5)/factorial(3)
factorial(4)/(factorial(2)*factorial(2))
6*(0.5)^4
factorial(7)/(factorial(5)*factorial(2))
21*(.5)^7
factorial(7)
factorial(5)*factorial(2)
5040/240
21*(.5^7)
21/128
factorial(5)/(factorial(3)*factorial(2))
10*(.5^5)
(1/125000)*(1000/125000)
.55*.8
.44*.10
1/10,000
1/10000
P(T|D) <- (1/10000)*.99
(1/10000)*.99
(9.9e-05)(1/10000)+((9999/10000)*.01)(9999/10000))
(9.9e-05)(1/10000)+((9999/10000)*.01)(9999/10000)
(9.9e-05)*(1/10000)+((9999/10000)*.01)*(9999/10000)
(9.9e-05)*(1/10000)/0.00999801
install.packages("BSDA")
library("BSDA
")
library("BSDA")
set.seed(1)
choc <- rnorm(10000, mean = 40, sd = 2)
hist(choc, freq = false, main = "Chocolate Bar Histogram
", xlab = "weight")
hist(choc, freq = F, main = "Chocolate Bar Histogram
", xlab = "weight")
curve(dnorm(x, mean = 40, sd = 2), col = 'blue', add = T)
summary(choc)
z.test(choc, sigma.x = 2, conf.level= 0.95)$conf.int
t.test(choc, conf.level = 0.95)$conf.int
t.test(choc, conf.level = 0.95)$conf.int
choc.batch <- rnorm(20, mean = 40, sd = 2)
set.seed(1)
choc <- rnorm(10000, mean = 40, sd = 2)
hist(choc, freq = F, main = "Chocolate Bar Histogram
", xlab = "weight")
curve(dnorm(x, mean = 40, sd = 2), col = 'blue', add = T)
summary(choc)
# Runs a Z Test but only tells confidence level
z.test(choc, sigma.x = 2, conf.level= 0.95)$conf.int
# does contain true mean (40)
# T test doesn't assume that you know sigma (sd)
# should give a wider confidence interval because we are guessing more
# things by estimating sigma
t.test(choc, conf.level = 0.95)$conf.int
choc.batch <- rnorm(20, mean = 40, sd = 2)
z.test(choc.batch, sigma.x = 2, conf.level = 0.95)$conf.int
curve(dnorm(x,mean=40,sd=2), from=33, to=48, main="95% CI simulation for n=20
", xlab='weight (g)', ylab='Density', lwd=2, col='blue')
abline(v=40, col='purple', lwd= 2)
for(i in 1:attempts){
color <- rgb(0,0,0,0.5)
choc.batch <- rnorm(20, mean=40, sd=2)
myCI <- z.test(choc.batch, sigma.x=2, conf.level=0.95)$conf.int
# if this if statement is fufilled, means myCI does not contain mean
if(min(myCI)>40 | max(myCI)<40){
color <- rgb(1,0,0,1)
failed_to_contain <- failed_to_contain + 1
}
segments(min(myCI),0.2*i/attempts, max(myCI),0.2*i/attempts, lwd=1, col
= color)
}
attempts <- 1000
curve(dnorm(x,mean=40,sd=2), from=33, to=48, main="95% CI simulation for n=20
", xlab='weight (g)', ylab='Density', lwd=2, col='blue')
abline(v=40, col='purple', lwd= 2)
failed_to_contain <- 0
for(i in 1:attempts){
color <- rgb(0,0,0,0.5)
choc.batch <- rnorm(20, mean=40, sd=2)
myCI <- z.test(choc.batch, sigma.x=2, conf.level=0.95)$conf.int
# if this if statement is fufilled, means myCI does not contain mean
if(min(myCI)>40 | max(myCI)<40){
color <- rgb(1,0,0,1)
failed_to_contain <- failed_to_contain + 1
}
segments(min(myCI),0.2*i/attempts, max(myCI),0.2*i/attempts, lwd=1, col
= color)
}
failed_to_contain/attempts
9 + 7 + 8
( 5 + 7 + 5 + 6 + 5 + 4 + 7 + 9)/8
(5 - 6.1)/0.82
(6-6.1)/1.6
.2021-.0552
.2021+.0552
.0552/(sqrt(1000))
.0552/(sqrt(50))
(16/310)-(54/600)
4/sqrt(250)
3.56/sqrt(90)
4.97 - 2.62
4.97 - 2.632
(1.682)(8.2/sqrt(43))+4.8
(1.682)*(8.2/sqrt(43))+4.8
(1.682)*(8.2/sqrt(43))-4.8
4.8-(1.682)*(8.2/sqrt(43))
18.7 / sqrt(45)
-23.5 + 1.301 * (18.7/sqrt(45))
-23.5 + 1.301 * 2.788
-23.5 - 1.301 * 2.788
18.7/sqrt(25)
-23.5 + 1.318*3.74
-23.5 - 1.318*3.74
27.1-19.9
28.4-18.6
sqrt((237)^2/2423 + (256)^2/2697)
sqrt(((237)^2)/2423 + ((256)^2)/2697)
sqrt(((237)^2)/35 + ((256)^2)/40)
2679-2423
-256 + (56.95)*1.993
-256 - 56.95 * 1.993
-256 + (56.95)*1.666
-256 - (56.95)*1.666
6.65 - 4.31
48 * 36^2 + 35 * 32^2
98048/(49+36-2)
sqrt(1181.301)
49 + 36 -2
2.34 + 34.37 * 2.636
2.34 - 34.47 * 2.636
220+260
480/2
(260-220)^2
1600/12
sqrt(133.3333)
sqrt(133.3333)
(45*36 + 35*32)
2740/(49+36-2)
sqrt(33.01205)
49+36-2
2.34 + 5.745611*2.636
6.65 - 4.31
1/49 + 1/36
.0481859 * 33.01205
sqrt(1.590712)
2.34 + 1.261 * 2.636
2.34 - 1.261 * 2.636
.0481859 * 33.01205
sqrt(1.590715)
2.34 + 1.261236 * 2.636
48*36
1728 + 35*32
2848/(49+36-2)
((1/49)+(1/36))
34.31325*0.04818594
sqrt(1.653416)
2.34 + 1.285852 * 2.636
2.34 - 1.285852 * 2.636
132 / 400
sqrt((.33*.66)/400)
0.02333452*2.574
.22*2
.44+.22
1-.22
sqrt((.22*.78)/100)*2
.0828+.22
(sqrt((.22*.78)/500)*2)+.22
(sqrt((.22*.78)/1000)*2)+.22
34/1536
1-.022
0.02213542*1536
sqrt((.022*.978)/1536)
2.576*0.003742701+.022
2.576*0.003742701-.022
0.31-0.18
((.31*(1-.31)/120)+ (.18*(1-.18)/265))*1.96 - .131
((.31*(1-.31)/120)+ (.18*(1-.18)/265))*1.96 + .131
((.31*(1-.31)/120)+ (.18*(1-.18)/265))*1.96
0.004585383 + .13
0.004585383 - .13
.13 - 0.004585383
.31*(1-.31)
0.2139/120
0.0017825+(.18*(1-.18)/265)
0.002339481 * 1.96
0.004585383 + .13
.13 - 0.004585383
sqrt((0.42*(1-0.42))/61)
15/61
(.2459 - .42)/.0632
.05*(1-.05)
.0475/420
set.seed(20)
choc.batch <- rnorm(20, mean=42, sd=2)
summary(choc.batch)
mu.0 <- 40
sigma.0 <- 2
n <- length(choc.batch)
x.bar <- mean(choc.batch)
curve(dnorm(x, mean = mu.0, sd = sigma.0/sqrt(n)), xlim = c(38, 42),
main = "Distribution of Chocolate Weight Under Null Hypothesis",
xlab = "Chocolate Bar Weight (in g)", ylab = "Density", col = "blue")
abline(v = mean(choc.batch), lwd = 2)
text("Unknown batch mean", x = mean(choc.batch), y = 0.6, cex = 0.8, pos = 2)
text("Sampling distribution", x = mu.0, y = 0.3, cex = 0.8, col = "blue")
(1-pnorm(x.bar, mean=mu.0, sd=sigma.0/sqrt(n)))
(1-pnorm(x.bar, mean=mu.0, sd=sigma.0/sqrt(n)))*2
library(BSDA)
install.packages("BSDA")
library(BSDA)
install.packages("BSDA")
z.test(x=choc.batch, mu=40, sigma.x=2, conf.level = .95)
t.test(x=choc.batch, mu=40, conf.level = .95)
sqrt((.31*(1-.31)/120)+ .18*(1-.18)/265)
.13 + 0.04836818 * 1.96
.13 - 0.04836818 * 1.96
sqrt((.05*(1-.05)/420)+ .09*(1-.09)/580)
-.04/.01595
.05-.09
-.04/0.01594685
sqrt((.05*(1-.05)/420)+ .09*(1-.09)/580)
.0082*2
(17.2-16)/(6.2/sqrt(82))
1.01/sqrt(25)
(26.3-27.1)/.202
5.24/sqrt(54)
(17.4-16)/(5.7/sqrt(80))
(0.947 - 1.25)/(0.723/sqrt(15))
(10*29.16 + 20*62.41)/(11+21-2)
51.32667*sqrt((1/11)+(1/21))
sqrt(51.32667)*sqrt((1/11)+(1/21))
(4.5-3.6)/2.666494
sqrt((29.16/11)+(62.41/21))
(4.5-3.6)/2.37
7181-5310
sqrt((2898^2)/79 + (3247^2)/151)
1871 + 1.654*419.6786
1871 - 1.654*419.6786
0.813-0.672
sqrt((.183^2)/79 + (.246^2)/151)
.141/0.02871724
23+28-2
((22*10^2) + (27*11^2))/49
40.1-46.8
-6.7/111.5714
sqrt(111.5714)*sqrt((1/23)+(1/28))
-6.7/2.97
3.86-3.26
.6/1.26
1+2+3+4
10/4
(8+6+5+5)/4
1+1+2
7+4+5+4
(1-2.5)*(7-5) + (2-2.5)*(5-5) + (3-2.5)*(4-5) + (4-2.5)*(4-5)
(1-2.5)^2+(2-2.5)^2+(3-2.5)^2+ (4-2.5)^2
slope = -1
0.5^2 + 0.5^2 + 0.5^2 + 0.5^2
-5.43 + 4.55*11
27.76 - 35.01
7.25^2
-5.43 + 4.55*8.8
34.61-27.76
6.85^2
1169.8-501.9
667.9/1169.8
sqrt(4493/88)
sqrt(4.39)
2.1/sqrt(72+4493)
.43/0.03108128
89*4.39
2.1/sqrt(390.71)
.43/ 0.106241
.4795/.3986
1.20296*.8465
-5.312 + 0.06065*180
49 * 42.4^2
4.51685/8809.24
-.43/(2.1/sqrt(390.71))
-.43/(7.15/sqrt(390.71))
-.43 + 2.632 * (7.15 / sqrt(390.71)
-.43 + 2.632 * 7.15 / sqrt(390.71)
-.43 - 2.632 * 7.15 / sqrt(390.71)
0.8465*(.4795/.3986)
sqrt(28)* (0.8465/sqrt(1-(0.8465)^2))
sqrt(28)* (0.8080/sqrt(1-(0.8080)^2))
42.4^2
1797.76*49
4.51685/88090.24
(180-166.3)^2
187.69/((42.4)^2*49)
0.002130656+(1/50)
sqrt(0.02213066)
0.1487638*4.51685
166.3 + .672 * 2.010
166.3 - .672 * 2.010
180 + .672 * 2.010
180 - .672 * 2.010
5.605 + .672 * 2.010
5.605-+ .672 * 2.010
5.605 + 2.010 * sqrt((4.51685)^2 + (.672^2))
6.956 - 4.254
2.702/2
.672*sqrt(50)
(4.51685 * sqrt(1 + (1/50) + ((180-166.3)^2)/((42.4^2)*49))*sqrt(50)
(4.51685 * sqrt(1 + (1/50) + ((180-166.3)^2)/((42.4^2)*49))*sqrt(50)
jklda;fjd
(180-166.3)^2
187.69/((42.4^2)*49)
0.002130656 + 1/50 + 1
sqrt(1.022131)
1.011005 * 4.51685
5.605 + 2.01*4.567
(14.78467 - 5.605)/2
4.589835 + 5.605
-20* sqrt(5)
sqrt(44*43.5824^2)
43.5824/289.0929
